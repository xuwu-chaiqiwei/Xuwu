#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef XUWUIM_SWIFT_H
#define XUWUIM_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AgoraRtcKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import RongIMKit;
@import RongIMLib;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="XuwuIM",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC6XuwuIM7SLAgora")
@interface SLAgora : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SLAgora * _Nonnull shared;)
+ (SLAgora * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)registerApp:(NSString * _Nonnull)appId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AgoraRtcAudioVolumeInfo;

@interface SLAgora (SWIFT_EXTENSION(XuwuIM))
+ (void)addTarget:(id _Nullable)target speaksblock:(void (^ _Nullable)(NSArray<AgoraRtcAudioVolumeInfo *> * _Nonnull))speaksblock;
@end

@class AgoraRtcEngineKit;
@class NSNumber;

@interface SLAgora (SWIFT_EXTENSION(XuwuIM)) <AgoraRtcEngineDelegate>
/// 音量提示回调
- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine reportAudioVolumeIndicationOfSpeakers:(NSArray<AgoraRtcAudioVolumeInfo *> * _Nonnull)speakers totalVolume:(NSInteger)totalVolume;
/// 本地音乐播放完成回调
- (void)rtcEngineLocalAudioMixingDidFinish:(AgoraRtcEngineKit * _Nonnull)engine;
@end


@interface SLAgora (SWIFT_EXTENSION(XuwuIM))
/// 离开频道
/// \param channelId 频道id
///
+ (void)leaveWithChannelId:(NSString * _Nonnull)channelId;
/// 上麦
/// \param channelId 频道id
///
+ (void)onMicWithChannelId:(NSString * _Nonnull)channelId;
/// 下麦
/// \param channelId 频道id
///
+ (void)outMicWithChannelId:(NSString * _Nonnull)channelId;
/// 声音
/// \param channelId 频道
///
/// \param mute 是否静音
///
+ (void)voiceWithChannelId:(NSString * _Nonnull)channelId mute:(BOOL)mute;
/// 退出
+ (void)logout;
@end

@class AgoraRtcChannel;
@class AgoraChannelStats;
@class AgoraRtcRemoteAudioStats;

@interface SLAgora (SWIFT_EXTENSION(XuwuIM)) <AgoraRtcChannelDelegate>
/// 当前用户加入频道
- (void)rtcChannelDidJoinChannel:(AgoraRtcChannel * _Nonnull)rtcChannel withUid:(NSUInteger)uid elapsed:(NSInteger)elapsed;
/// 远端用户加入频道
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didJoinedOfUid:(NSUInteger)uid elapsed:(NSInteger)elapsed;
/// 角色转化回调
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didClientRoleChanged:(AgoraClientRole)oldRole newRole:(AgoraClientRole)newRole;
/// 远端用户离开频道
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didOfflineOfUid:(NSUInteger)uid reason:(AgoraUserOfflineReason)reason;
/// 当前用户离开频道
- (void)rtcChannelDidLeaveChannel:(AgoraRtcChannel * _Nonnull)rtcChannel withStats:(AgoraChannelStats * _Nonnull)stats;
/// 通话网络质量
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel networkQuality:(NSUInteger)uid txQuality:(AgoraNetworkQuality)txQuality rxQuality:(AgoraNetworkQuality)rxQuality;
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel remoteAudioStats:(AgoraRtcRemoteAudioStats * _Nonnull)stats;
/// 发生错误回调
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didOccurError:(AgoraErrorCode)errorCode;
/// 发生警告回调
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didOccurWarning:(AgoraWarningCode)warningCode;
/// 角色变化回调
- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine didClientRoleChanged:(AgoraClientRole)oldRole newRole:(AgoraClientRole)newRole;
@end

@class UIColor;

SWIFT_CLASS("_TtC6XuwuIM4SLIM")
@interface SLIM : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SLIM * _Nonnull shared;)
+ (SLIM * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 聊天页面导航颜色
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
/// 聊天页面头像大小
@property (nonatomic) CGSize portraitSize;
/// 聊天页面头像圆角
@property (nonatomic) CGFloat portraitRadius;
@property (nonatomic, copy) NSString * _Nonnull rc_userId_pre;
/// 初始化IM
+ (void)registerAppWithKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMConnectionStatusDelegate>
- (void)onRCIMConnectionStatusChanged:(RCConnectionStatus)status;
@end

@class RCMessage;

@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMReceiveMessageDelegate>
- (void)onRCIMReceiveMessage:(RCMessage * _Null_unspecified)message left:(int32_t)left;
@end


@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMGroupMemberDataSource>
- (void)getAllMembersOfGroup:(NSString * _Null_unspecified)groupId result:(void (^ _Null_unspecified)(NSArray<NSString *> * _Nullable))resultBlock;
@end

@class RCGroup;

@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMGroupInfoDataSource>
- (void)getGroupInfoWithGroupId:(NSString * _Null_unspecified)groupId completion:(void (^ _Null_unspecified)(RCGroup * _Nullable))completion;
@end

@class RCUserInfo;

@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMUserInfoDataSource>
- (void)getUserInfoWithUserId:(NSString * _Null_unspecified)userId completion:(void (^ _Null_unspecified)(RCUserInfo * _Nullable))completion;
@end

@class RCMessageContent;

@interface SLIM (SWIFT_EXTENSION(XuwuIM))
+ (void)loginToken:(NSString * _Nonnull)token success:(void (^ _Nonnull)(NSString * _Nullable))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 加入聊天室
+ (void)joinChatRoomId:(NSString * _Nonnull)roomId success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 退出聊天室
+ (void)quitChatRoomId:(NSString * _Nonnull)roomId success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 发送聊天室消息
+ (void)sendChatRoomMessageContent:(NSString * _Nonnull)targetId content:(RCMessageContent * _Nonnull)content success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 监听融云链接状态
+ (void)addConnectionStatusHandleBlock:(void (^ _Nonnull)(NSInteger))block;
@end


@interface SLIM (SWIFT_EXTENSION(XuwuIM))
/// 添加消息监听
/// \param target 目标
///
/// \param messages 要监听的消息类型
///
/// \param block 回调
///
+ (void)addTarget:(id _Nullable)target messages:(NSArray<SWIFT_METATYPE(RCMessageContent)> * _Nonnull)messages block:(void (^ _Nullable)(RCMessage * _Nonnull))block;
/// 添加消息拦截处理
+ (void)addMessageHandle:(NSArray<RCMessage *> * _Nonnull (^ _Nullable)(RCMessage * _Nonnull))block;
/// 添加用户信息提供者
+ (void)addUserInfoHandle:(void (^ _Nullable)(NSString * _Nonnull, void (^ _Nonnull)(RCUserInfo * _Nullable)))block;
/// 添加群组信息提供者
+ (void)addGroupInfoHandle:(void (^ _Nullable)(NSString * _Nonnull, void (^ _Nonnull)(RCGroup * _Nullable)))block;
/// 添加群组成员信息提供者
+ (void)addMembersHandle:(void (^ _Nullable)(NSString * _Nonnull, void (^ _Nonnull)(NSArray<NSString *> * _Nullable)))block;
+ (void)removeTarget:(id _Nullable)target;
/// 发送本地消息
+ (void)sendLocalMessageWithMessage:(RCMessage * _Nonnull)message;
@end

@class NSData;

@interface SLIM (SWIFT_EXTENSION(XuwuIM))
/// 注册消息类型
+ (void)registerMessageTypeWithMessageClass:(Class _Nonnull)messageClass;
/// 注册推送设备
/// \param token 设备token
///
+ (void)registerDeviceToken:(NSData * _Nonnull)token;
+ (BOOL)connectioned SWIFT_WARN_UNUSED_RESULT;
/// 退出IM
+ (void)logout;
/// 获取消息未读数量
+ (int32_t)unreadCount SWIFT_WARN_UNUSED_RESULT;
/// 清除消息未读数
+ (void)clearMessagesUnreadWithConversationType:(RCConversationType)conversationType targetId:(NSString * _Nonnull)targetId;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef XUWUIM_SWIFT_H
#define XUWUIM_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AgoraRtcKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import RongIMKit;
@import RongIMLib;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="XuwuIM",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC6XuwuIM7SLAgora")
@interface SLAgora : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SLAgora * _Nonnull shared;)
+ (SLAgora * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)registerApp:(NSString * _Nonnull)appId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AgoraRtcAudioVolumeInfo;

@interface SLAgora (SWIFT_EXTENSION(XuwuIM))
+ (void)addTarget:(id _Nullable)target speaksblock:(void (^ _Nullable)(NSArray<AgoraRtcAudioVolumeInfo *> * _Nonnull))speaksblock;
@end

@class AgoraRtcEngineKit;
@class NSNumber;

@interface SLAgora (SWIFT_EXTENSION(XuwuIM)) <AgoraRtcEngineDelegate>
/// 音量提示回调
- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine reportAudioVolumeIndicationOfSpeakers:(NSArray<AgoraRtcAudioVolumeInfo *> * _Nonnull)speakers totalVolume:(NSInteger)totalVolume;
/// 本地音乐播放完成回调
- (void)rtcEngineLocalAudioMixingDidFinish:(AgoraRtcEngineKit * _Nonnull)engine;
@end


@interface SLAgora (SWIFT_EXTENSION(XuwuIM))
/// 离开频道
/// \param channelId 频道id
///
+ (void)leaveWithChannelId:(NSString * _Nonnull)channelId;
/// 上麦
/// \param channelId 频道id
///
+ (void)onMicWithChannelId:(NSString * _Nonnull)channelId;
/// 下麦
/// \param channelId 频道id
///
+ (void)outMicWithChannelId:(NSString * _Nonnull)channelId;
/// 声音
/// \param channelId 频道
///
/// \param mute 是否静音
///
+ (void)voiceWithChannelId:(NSString * _Nonnull)channelId mute:(BOOL)mute;
/// 退出
+ (void)logout;
@end

@class AgoraRtcChannel;
@class AgoraChannelStats;
@class AgoraRtcRemoteAudioStats;

@interface SLAgora (SWIFT_EXTENSION(XuwuIM)) <AgoraRtcChannelDelegate>
/// 当前用户加入频道
- (void)rtcChannelDidJoinChannel:(AgoraRtcChannel * _Nonnull)rtcChannel withUid:(NSUInteger)uid elapsed:(NSInteger)elapsed;
/// 远端用户加入频道
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didJoinedOfUid:(NSUInteger)uid elapsed:(NSInteger)elapsed;
/// 角色转化回调
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didClientRoleChanged:(AgoraClientRole)oldRole newRole:(AgoraClientRole)newRole;
/// 远端用户离开频道
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didOfflineOfUid:(NSUInteger)uid reason:(AgoraUserOfflineReason)reason;
/// 当前用户离开频道
- (void)rtcChannelDidLeaveChannel:(AgoraRtcChannel * _Nonnull)rtcChannel withStats:(AgoraChannelStats * _Nonnull)stats;
/// 通话网络质量
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel networkQuality:(NSUInteger)uid txQuality:(AgoraNetworkQuality)txQuality rxQuality:(AgoraNetworkQuality)rxQuality;
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel remoteAudioStats:(AgoraRtcRemoteAudioStats * _Nonnull)stats;
/// 发生错误回调
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didOccurError:(AgoraErrorCode)errorCode;
/// 发生警告回调
- (void)rtcChannel:(AgoraRtcChannel * _Nonnull)rtcChannel didOccurWarning:(AgoraWarningCode)warningCode;
/// 角色变化回调
- (void)rtcEngine:(AgoraRtcEngineKit * _Nonnull)engine didClientRoleChanged:(AgoraClientRole)oldRole newRole:(AgoraClientRole)newRole;
@end

@class UIColor;

SWIFT_CLASS("_TtC6XuwuIM4SLIM")
@interface SLIM : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SLIM * _Nonnull shared;)
+ (SLIM * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 聊天页面导航颜色
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
/// 聊天页面头像大小
@property (nonatomic) CGSize portraitSize;
/// 聊天页面头像圆角
@property (nonatomic) CGFloat portraitRadius;
@property (nonatomic, copy) NSString * _Nonnull rc_userId_pre;
/// 初始化IM
+ (void)registerAppWithKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMConnectionStatusDelegate>
- (void)onRCIMConnectionStatusChanged:(RCConnectionStatus)status;
@end

@class RCMessage;

@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMReceiveMessageDelegate>
- (void)onRCIMReceiveMessage:(RCMessage * _Null_unspecified)message left:(int32_t)left;
@end


@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMGroupMemberDataSource>
- (void)getAllMembersOfGroup:(NSString * _Null_unspecified)groupId result:(void (^ _Null_unspecified)(NSArray<NSString *> * _Nullable))resultBlock;
@end

@class RCGroup;

@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMGroupInfoDataSource>
- (void)getGroupInfoWithGroupId:(NSString * _Null_unspecified)groupId completion:(void (^ _Null_unspecified)(RCGroup * _Nullable))completion;
@end

@class RCUserInfo;

@interface SLIM (SWIFT_EXTENSION(XuwuIM)) <RCIMUserInfoDataSource>
- (void)getUserInfoWithUserId:(NSString * _Null_unspecified)userId completion:(void (^ _Null_unspecified)(RCUserInfo * _Nullable))completion;
@end

@class RCMessageContent;

@interface SLIM (SWIFT_EXTENSION(XuwuIM))
+ (void)loginToken:(NSString * _Nonnull)token success:(void (^ _Nonnull)(NSString * _Nullable))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 加入聊天室
+ (void)joinChatRoomId:(NSString * _Nonnull)roomId success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 退出聊天室
+ (void)quitChatRoomId:(NSString * _Nonnull)roomId success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 发送聊天室消息
+ (void)sendChatRoomMessageContent:(NSString * _Nonnull)targetId content:(RCMessageContent * _Nonnull)content success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(NSInteger))fail;
/// 监听融云链接状态
+ (void)addConnectionStatusHandleBlock:(void (^ _Nonnull)(NSInteger))block;
@end


@interface SLIM (SWIFT_EXTENSION(XuwuIM))
/// 添加消息监听
/// \param target 目标
///
/// \param messages 要监听的消息类型
///
/// \param block 回调
///
+ (void)addTarget:(id _Nullable)target messages:(NSArray<SWIFT_METATYPE(RCMessageContent)> * _Nonnull)messages block:(void (^ _Nullable)(RCMessage * _Nonnull))block;
/// 添加消息拦截处理
+ (void)addMessageHandle:(NSArray<RCMessage *> * _Nonnull (^ _Nullable)(RCMessage * _Nonnull))block;
/// 添加用户信息提供者
+ (void)addUserInfoHandle:(void (^ _Nullable)(NSString * _Nonnull, void (^ _Nonnull)(RCUserInfo * _Nullable)))block;
/// 添加群组信息提供者
+ (void)addGroupInfoHandle:(void (^ _Nullable)(NSString * _Nonnull, void (^ _Nonnull)(RCGroup * _Nullable)))block;
/// 添加群组成员信息提供者
+ (void)addMembersHandle:(void (^ _Nullable)(NSString * _Nonnull, void (^ _Nonnull)(NSArray<NSString *> * _Nullable)))block;
+ (void)removeTarget:(id _Nullable)target;
/// 发送本地消息
+ (void)sendLocalMessageWithMessage:(RCMessage * _Nonnull)message;
@end

@class NSData;

@interface SLIM (SWIFT_EXTENSION(XuwuIM))
/// 注册消息类型
+ (void)registerMessageTypeWithMessageClass:(Class _Nonnull)messageClass;
/// 注册推送设备
/// \param token 设备token
///
+ (void)registerDeviceToken:(NSData * _Nonnull)token;
+ (BOOL)connectioned SWIFT_WARN_UNUSED_RESULT;
/// 退出IM
+ (void)logout;
/// 获取消息未读数量
+ (int32_t)unreadCount SWIFT_WARN_UNUSED_RESULT;
/// 清除消息未读数
+ (void)clearMessagesUnreadWithConversationType:(RCConversationType)conversationType targetId:(NSString * _Nonnull)targetId;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
